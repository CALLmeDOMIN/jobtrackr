generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  username        String           @unique
  email           String           @unique
  password        String?
  profilePic      String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  jobApplications JobApplication[]
}

model JobApplication {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  status      String
  position    String
  dateApplied DateTime
  user        User        @relation(fields: [userId], references: [id])
  userId      String      @db.ObjectId
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Interviews  Interview[]
  Company     Company     @relation(fields: [companyId], references: [id])
  companyId   String      @db.ObjectId
  Offer       Offer?      @relation(fields: [offerId], references: [id])
  offerId     String?     @db.ObjectId
}

model Interview {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  jobApplication JobApplication @relation(fields: [applicationId], references: [id])
  applicationId  String         @db.ObjectId
  interviewDate  DateTime
  interviewer    String
  feedback       String
  interviewType  String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Offer {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  offerDate      DateTime
  position       String
  jobDescription String
  salary         Int
  benefits       String[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  jobApplication JobApplication[]
}

model Company {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  industry       String
  location       String
  website        String
  contactPerson  String
  notes          Note[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  JobApplication JobApplication[]
}

model Note {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String
  applicationId String
  noteText      String
  date          DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  company       Company? @relation(fields: [companyId], references: [id])
  companyId     String?  @db.ObjectId
}
